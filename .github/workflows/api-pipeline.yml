name: API CI-CD

on:
  push:
    branches: ["release"]
    paths:
      - ".github/workflows/api-pipeline.yml"
      - "api/**"

env:
  key_file: ./cloud.key

jobs:
  build:
    uses: ./.github/workflows/build.yml
    with:
      REGISTRY_IMAGE: ${{ vars.REGISTRY }}/${{ vars.API_IMAGE_NAME }}
      IMAGE_ARTIFACT: ${{ vars.API_IMAGE_NAME }}.${{ github.sha }}

  publish:
    needs: build
    uses: ./.github/workflows/publish.yml
    with:
      TAG: ${{ github.sha }}
      IMAGE_ARTIFACT: ${{ vars.API_IMAGE_NAME }}.${{ github.sha }}
      REGISTRY_IMAGE: ${{ vars.REGISTRY }}/${{ vars.API_IMAGE_NAME }}
    secrets:
      DOCKER_REGISTRY_USERNAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
      DOCKER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

  database-availability:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: solve
        run: echo "ab"

  database-deploy:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: solve
        run: echo "a"

  deploy:
    runs-on: ubuntu-latest
    needs: [publish, database-availability, database-deploy]
    if: needs.database-availability.result == 'success' || needs.database-deploy.result == 'success'
    steps:
      - name: Retrieve docker compose file
        uses: actions/checkout@v4

      - name: Add server public key
        uses: ./.github/actions/cloud-keys
        with:
          CLOUD_RSA_KEY: ${{ secrets.CLOUD_RSA_KEY }}

      - name: Inject compose file to server
        uses: ./.github/actions/cloud-scp
        with:
          local_path: ./api/docker-compose.yml
          target_path: /home/${{ secrets.CLOUD_USER }}
          CLOUD_USER: ${{ secrets.CLOUD_USER }}
          CLOUD_ADDRESS: ${{ secrets.CLOUD_ADDRESS }}

      - name: Prepare database and inject variables
        run: |
          ssh -t -o StrictHostKeyChecking=no -i "${{ env.key_file }}" ${{ secrets.CLOUD_USER }}@${{ secrets.CLOUD_ADDRESS }} << EOF
            sudo -i

            echo "${{ secrets.API_ENV_FILE }}" > ./.env
            chmod 600 ./.env && set -a
            source ./.env

            if docker ps --filter "name=${{ vars.DB_CONTAINER_NAME }}" --format "{{.Names}}" | grep -w "${{ vars.DB_CONTAINER_NAME }}"; then
              echo "Databse is running."
            else
              cd /home/${{ secrets.CLOUD_USER }}
              export CONTAINER_NAME=${{ vars.DB_CONTAINER_NAME }}
              docker-compose up -d ${{ vars.DB_SERVICE_NAME }} --force-recreate --remove-orphans
            fi
          EOF

      - name: Remove previous service version
        uses: ./.github/actions/docker-stop-rm
        with:
          CLOUD_USER: ${{ secrets.CLOUD_USER }}
          CLOUD_ADDRESS: ${{ secrets.CLOUD_ADDRESS }}
          API_CONTAINER_NAME: ${{ vars.API_CONTAINER_NAME }}

      - name: Deploy
        run: |
          ssh -t -o StrictHostKeyChecking=no -i "${{ env.key_file }}" ${{ secrets.CLOUD_USER }}@${{ secrets.CLOUD_ADDRESS }} << EOF
            sudo -i
            cd /home/${{ secrets.CLOUD_USER }}
            export CONTAINER_NAME=${{ vars.API_CONTAINER_NAME}}
            docker-compose up -d ${{ vars.API_SERVICE_NAME  }} --force-recreate --remove-orphans
          EOF

  cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Move file to project folder to keep history
        run: |
          ssh -o StrictHostKeyChecking=no -i "${{ env.key_file }}" ${{ secrets.CLOUD_USER }}@${{ secrets.CLOUD_ADDRESS }} sudo mv /home/${{ secrets.CLOUD_USER }}/docker-compose.yml ${{ vars.PROJECT_FOLDER }}/docker-compose.yml

      - name: Remove sensitive files
        run: |
          rm -f ${{ env.key_file }}
          rm -f ./.env
