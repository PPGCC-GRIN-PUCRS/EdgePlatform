name: Platform CI-CD

on:
  push:
    branches: ["release"]
    paths:
      - "!.github/workflows/api-pipeline.yml"
      - "!api/**"

env:
  key_file: ./cloud.key
  REGISTRY_IMAGE: ${{ vars.REGISTRY }}/${{ vars.PLATFORM_IMAGE_NAME }}
  IMAGE_ARTIFACT: ${{ vars.PLATFORM_IMAGE_NAME }}.${{ github.sha }}

jobs:
  # ONGOING #TODO
  # test:
  #   strategy:
  #     matrix:
  #       node-version: [ 20.x ]
  #   runs-on: ubuntu-latest
  #   outputs:
  #     coverage: ""
  #   steps:
  #     - name: validation
  #       users: actions/checkout@v4

  build:
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: |
            ${{ env.IMAGE_ARTIFACT}}
            ${{ env.REGISTRY_IMAGE }}
            ${{ env.REGISTRY_IMAGE }}:${{ github.sha }}

      - name: Set Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: build image
        id: build
        uses: docker/build-push-action@v6
        with:
          no-cache: true
          push: false
          load: true
          tags: |
            ${{ vars.PLATFORM_IMAGE_NAME }}:latest
            ${{ env.REGISTRY_IMAGE }}:${{ github.sha }}
          outputs: |
            type=docker,dest=/tmp/${{ env.IMAGE_ARTIFACT }}.tar

      - name: Image digest
        run: |
          echo "${{ steps.build.outputs.digest }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: ${{ env.IMAGE_ARTIFACT }}
          path: /tmp/${{ env.IMAGE_ARTIFACT }}.tar

  publish:
    permissions:
      id-token: write
      attestations: write
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.IMAGE_ARTIFACT }}
          path: /tmp

      - name: Load image
        run: |
          docker load --input /tmp/${{ env.IMAGE_ARTIFACT }}.tar
          docker image ls -a

      - name: Login to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Docker publish image
        run: |
          docker push ${{ env.REGISTRY_IMAGE }}:${{ github.sha }}
          docker image tag ${{ env.REGISTRY_IMAGE }}:${{ github.sha }} ${{ env.REGISTRY_IMAGE }}:latest
          docker push ${{ env.REGISTRY_IMAGE }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: Retrieve docker compose file
        uses: actions/checkout@v4

      - name: Add server public key
        uses: ./.github/actions/cloud-keys
        with:
          CLOUD_RSA_KEY: ${{ secrets.CLOUD_RSA_KEY }}

      - name: Inject compose file to server
        uses: ./.github/actions/cloud-scp
        with:
          local_path: ./api/docker-compose.yml
          target_path: /home/${{ secrets.CLOUD_USER }}
          CLOUD_USER: ${{ secrets.CLOUD_USER }}
          CLOUD_ADDRESS: ${{ secrets.CLOUD_ADDRESS }}

      - name: Remove previous service version
        uses: ./.github/actions/docker-stop-rm
        with:
          CLOUD_USER: ${{ secrets.CLOUD_USER }}
          CLOUD_ADDRESS: ${{ secrets.CLOUD_ADDRESS }}
          API_CONTAINER_NAME: ${{ vars.API_CONTAINER_NAME }}

      - name: Deploy
        run: |
          ssh -t -o StrictHostKeyChecking=no -i "${{ env.key_file }}" ${{ secrets.CLOUD_USER }}@${{ secrets.CLOUD_ADDRESS }} << EOF
            sudo -i
            cd /home/${{ secrets.CLOUD_USER }}
            export CONTAINER_NAME=${{ vars.PLATFORM_CONTAINER_NAME }}
            docker-compose up -d --force-recreate --remove-orphans
          EOF

  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
      - name: Move file to project folder to keep history
        run: |
          ssh -o StrictHostKeyChecking=no -i "${{ env.key_file }}" ${{ secrets.CLOUD_USER }}@${{ secrets.CLOUD_ADDRESS }} sudo mv /home/${{ secrets.CLOUD_USER }}/docker-compose.yml ${{ vars.PROJECT_FOLDER }}/docker-compose.yml

      - name: Remove sensitive files
        run: |
          rm -f ${{ env.key_file }}
